* Handshake
** Packet Flow
   + Get Option Message
   + Send Support message to client
   + Get Startup Message
** Get Option request from client
*** Check whether the version(0x41)
    #+BEGIN_SRC
 []byte{0x42, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x0}
    #+END_SRC
*** Check server version(0x5)
   #+BEGIN_SRC
 []byte{0x5, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x0}
    #+END_SRC
** Send support info to client
   #+BEGIN_SRC
   0x85 00 00 00 06 00 00 00     66 00 03 00 11 50 52 4f
     54 4f 43 4f 4c 5f 56 45     52 53 49 4f 4e 53 00 04
     00 04 33 2f 76 33 00 04     34 2f 76 34 00 04 35 2f
     76 35 00 09 36 2f 76 36     2d 62 65 74 61 00 0b 43
     4f 4d 50 52 45 53 53 49     4f 4e 00 02 00 06 73 6e
     61 70 70 79 00 03 6c 7a     34 00 0b 43 51 4c 5f 56
     45 52 53 49 4f 4e 00 01     00 05 33 2e 34 2e 35

<- Protocol version-> <- flag-> <- stream id-> <- op code-> <- length of message ->
0x83                  0x00 0x00 0x00           0x06         0x00 0x00 0x00 0x66

<- Number of kv -> <- Length of first key -> <- Key                          -> <- Number of values->     <- Length of first value ->
  \x00 \x03        \x00 \x11                 PROTOCOL_VERSIONS                  \x00 \x04                 \x00 \x04
<- Fisr value -> <- Length of second value -> <- Second value -> <- Length of third value -> <- Third value -> <- Length of fourth value -> <- fourth value ->
3 / v 3          \x00 \x04                    4 / v 4            \x00 \x04                    5 / v 5           \x00 \t                     6 / v 6 - b e t a
<- Length of second key -><- key value -> <- Number of values -> <- Length of first value -> <- First value -> <- Length of second value -> <- Second Value ->
\x00 \x0b                 COMPRESSION     \x00 \x02              \x00 \x06                   snappy            \x00 \x03                      l z 4
<- Length of third key -> <- key value -> <- Number of values -> <- Length of first value -> <- First value ->
\x00 \x0b                 CQL_VERSION      \x00 \x01             \x00 \x05                   3.4.7

   #+END_SRC

   #+BEGIN_SRC
x00  x03   x00  x11     P    R    O    T     O      C     O     L    _      V     E    R      S    I     O     N      S    x00  x04  x00   x04   3    /     v     3    x00  x04   4     /     v     4    x00  x04    5    /     v     5    x00   \t   6     /     v     6     -     b     e     t     a    x00  x0b   C     O     M     P     R     E     S     S     I     O     N    x00  x02  x00  x06   s     n    a      p     p     y    x00  x03   l     z      4   x00  x0b   C     Q     L     _     V     E     R     S     I     O     N    x00  x01  x00 x05   3     .     4     .     7
                                     0x0, 0x3, 0x0, 0x11, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x0, 0x4, 0x0, 0x4, 0x33, 0x2f, 0x76, 0x33, 0x0, 0x4, 0x34, 0x2f, 0x76, 0x34, 0x0, 0x4, 0x35, 0x2f, 0x76, 0x35, 0x0, 0x9, 0x36, 0x2f, 0x76, 0x36, 0x2d, 0x62, 0x65, 0x74, 0x61, 0x0, 0xb, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x0, 0x2, 0x0, 0x6, 0x73, 0x6e, 0x61, 0x70, 0x70, 0x79, 0x0, 0x3, 0x6c, 0x7a, 0x34, 0x0, 0xb, 0x43, 0x51, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x0, 0x1, 0x0, 0x5, 0x33, 0x2e, 0x34, 0x2e, 0x37
   \x85\x00\x00\x00\x06\x00\x00\x00f\x00\x03\x00\x11PROTOCOL_VERSIONS\x00\x04\x00\x043/v3\x00\x044/v4\x00\x045/v5\x00\t6/v6-beta\x00\x0bCOMPRESSION\x00\x02\x00\x06snappy\x00\x03lz4\x00\x0bCQL_VERSION\x00\x01\x00\x053.4.7
   \x85\x00\x00\x00\x06\x00\x00\x00o\x00\x03\x00\x11PROTOCOL_VERSIONS\x00\x04\x00\x043/v3\x00\x044/v4\x00\x045/v5\x00\t6/v6-beta\x00\x0bCOMPRESSION\x00\x02\x00\x06snappy\x00\x03lz4\x00\x0bCQL_VERSION\x00\x01\x00\x053.4.7

f -> 66
o -> 6f
   #+END_SRC

** Get Startup message from client
   #+BEGIN_SRC
<- protocol version -> <- flags -> <- stream id -> <- op code -> <- body message length ->
0x5                   , 0x0, 0x0   , 0x1           , 0x1         , 0x0, 0x0, 0x0, 0x53
<- Number of map element -> 
0x0, 0x3
<- 01 -><- Length of key -> <- First key                                                  ->   <- Length of value -> <- value                                                                                                                        -> 
        0x0, 0xb            0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45   0x0, 0x16             0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x78, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72
<- 02 -><- Length of key -> <- Key                                                                          -> <- Length value -> <- Value ->
        0x0, 0xe            0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e 0x0, 0x6           0x33, 0x2e, 0x32, 0x39, 0x2e, 0x30
<- 03 -><- Length of key -> <- Key                                                         ->  <- Length of Value -> <- Value ->
        0x0, 0xb           , 0x43, 0x51, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e   0x0, 0x5             , 0x33, 0x2e, 0x34, 0x2e, 0x37
   #+END_SRC
* table meta data without data
#+BEGIN_SRC
 00 00 00 02                                                   <- Result type: RESULT_KIND_VOID/RESULT_KIND_ROWS/RESULT_KIND_SET_KEYSPACE/RESULT_KIND_PREPARED/RESULT_KIND_SCHEMA_CHANGE
 00 00 00 01 -> flags
 00 00 00 0c -> colcount
 00 06 73 79 73 74 65 6d                                       <- keyspace name (system)
 len    1  2  3  4  5  6
 00 08 70 65 65 72 73 5f 76 32                                 <- table name    (peers_v2)
 len    1  2  3  4  5  6  7  8
 00 04 70 65 65 72                                     00 10   <- column name   (peer:            InetAddressType )
 len    1  2  3  4                                     type
 00 09 70 65 65 72 5f 70 6f 72 74                      00 09   <- column name   (peer_port:       Int32Type       )
 len    1  2  3  4  5  6  7  8  9                      type
 00 0b 64 61 74 61 5f 63 65 6e 74 65 72                00 0d   <- column name   (data_center:     VarcharType     )
 len    1  2  3  4  5  6  7  8  9  a  b                type
 00 07 68 6f 73 74 5f 69 64                            00 0c   <- column name   (host_id:         UUIDType        )
 len    1  2  3  4  5  6  7                            type
 00 0e 6e 61 74 69 76 65 5f 61 64 64 72 65 73 73       00 10   <- column name   (native_address:  InetAddressType )
 len    1  2  3  4  5  6  7  8  9  1  b  c  d  e       type
 00 0b 6e 61 74 69 76 65 5f 70 6f 72 74                00 09   <- column name   (native_port:     Int32Type       )
 len    1  2  3  4  5  6  7  8  9  a  b                type
 00 0c 70 72 65 66 65 72 72 65 64 5f 69 70             00 10   <- column name   (preferred_ip:    Int32Type       )
 len    1  2  3  4  5  6  7  8  9  a  b  c             type
 00 0e 70 72 65 66 65 72 72 65 64 5f 70 6f 72 74       00 09   <- column name   (preferred_port:  Int32Type       )
 len    1  2  3  4  5  6  7  8  9  a  b  c  d  e       type
 00 04 72 61 63 6b                                     00 0d   <- column name   (rack:            VarcharType     )
 len    1  2  3  4                                     type
 00 0f 72 65 6c 65 61 73 65 5f 76 65 72 73 69 6f 6e    00 0d   <- column name   (release_version: VarcharType     )
 len    1  2  3  4  5  6  7  8  9  a  b  c  d  e  f    type
 00 0e 73 63 68 65 6d 61 5f 76 65 72 73 69 6f 6e       00 0c   <- column name   (schema_version:  UUIDType        )
 len    1  2  3  4  5  6  7  8  9  a  b  c  d  e       type
 00 06 74 6f 6b 65 6e 73                               00 22   <- column name   (tokens:          SetType         )
 len    1  2  3  4  5  6                               type
 00 0d 00 00 00 00                                             <- ?? end characters ??
#+END_SRC

* data with meta info
#+BEGIN_SRC
d60002                                   <- 17 bit(little endian) + 7 bit
77bd3f                                   <- crc24
85                                       <- version
00                                       <- option
0003                                     <- stream id
08                                       <- op(result response)
000000cd                                 <- body length
00000002
00000001
00000003
000d 73797374656d5f736368656d61          <- key space name(system_schema)
0009 6b6579737061636573                  <- schema name(keyspaces)
000d 6b657973706163655f6e616d65 000d     <- colname (keyspace_name)
000e 64757261626c655f777269746573 0004   <- colname (durable_writes)
000b 7265706c69636174696f6e 0021         <- colname (replication)
000d000d 
00000005                 <- row count 
0000000b 73797374656d5f61757468          <- system_auth
00000001 01                              <- 0x01
00000057 0000000200000005636c6173730000002b6f72672e6170616368652e63617373616e6472612e6c6f6361746f722e53696d706c655374726174656779000000127265706c69636174696f6e5f666163746f720000000131  <- org.apache.cassandra.locator.SimpleStrategy

0000000d 73797374656d5f736368656d61      <- system_schema
00000001 01                              <- 0x01
0000003b 0000000100000005636c6173730000002a6f72672e6170616368652e63617373616e6472612e6c6f6361746f722e4c6f63616c5374726174656779     <- *org.apache.cassandra.locator.LocalStrategy

00000012 73797374656d5f6469737472696275746564     <- system_distributed 
00000001 01                                       <- 0x01
00000057 0000000200000005636c6173730000002b6f72672e6170616368652e63617373616e6472612e6c6f6361746f722e53696d706c655374726174656779000000127265706c69636174696f6e5f666163746f720000000133   <- 

00000006 73797374656d
00000001 01
0000003b 0000000100000005636c6173730000002a6f72672e6170616368652e63617373616e6472612e6c6f6361746f722e4c6f63616c5374726174656779

0000000d 73797374656d5f747261636573
00000001 01
00000057 0000000200000005636c6173730000002b6f72672e6170616368652e63617373616e6472612e6c6f6361746f722e53696d706c655374726174656779000000127265706c69636174696f6e5f666163746f720000000132


 _process_segment_buffer, 620
 The segment codec is <<cassandra.segment.SegmentCodec object at 0x7fb83b4b00>>
 the header_data is 20262 length: 3, CRC24_LENGTH: 3, expected_header_crc: a5a91a, actual_header_crc: a5a91a
 COming here to compare the data <620> vs <620>


 050000030700000021 00000009   73656c65637420313b 0001000000340000006400080005  cba3d3855a18
                    length   content


Length ck242  header
290002 f7fce0 0500000207 
Flag     body length  body                 consistency_level flags    params  fetch_size timestamp
00000020 0000000a     53454c4543542031203b 000a              00000024         00001388   0005cbadd0c188e1 
         0000000a     53454c4543542031203b
0000000a              53454c4543542031203b 000a              00000024
6dde03c3
flags:
_VALUES_FLAG                  = 0x01
_SKIP_METADATA_FLAG           = 0x02
_PAGE_SIZE_FLAG               = 0x04
_WITH_PAGING_STATE_FLAG       = 0x08
_WITH_SERIAL_CONSISTENCY_FLAG = 0x10
_PROTOCOL_TIMESTAMP_FLAG      = 0x20
_NAMES_FOR_VALUES_FLAG        = 0x40  # not used here
_WITH_KEYSPACE_FLAG           = 0x80
_PREPARED_WITH_KEYSPACE_FLAG  = 0x01
_PAGE_SIZE_BYTES_FLAG         = 0x40000000
_PAGING_OPTIONS_FLAG          = 0x80000000


<QueryMessage(query='SELECT 1 ;', query_params=None, consistency_level=10, serial_consistency_level=None, fetch_size=5000, paging_state=None, timestamp=1631323029002819, skip_meta=False,  continuous_paging_options=None, keyspace=None, allow_beta_protocol_version=False)>
#+END_SRC

* cqlsh debug
** Rename zip lib to avoid to be called
   #+BEGIN_SRC
workstation$ sudo mv /usr/share/cassandra/lib/cassandra-driver-internal-only-3.25.0.zip  /usr/share/cassandra/lib/cassandra-driver-internal-only-3.25.0.zip.bak
   #+END_SRC
** Rename connection.cpython-39-x86_64-linux-gnu.so
   #+BEGIN_SRC
workstation$ sudo mv /home/jay.zhang/.local/lib/python3.9/site-packages/cassandra/connection.cpython-39-x86_64-linux-gnu.so /home/jay.zhang/.local/lib/python3.9/site-packages/cassandra/connection.cpython-39-x86_64-linux-gnu.so.bak
   #+END_SRC
** Enble log
   #+BEGIN_SRC
workstation$ more /home/jay.zhang/.local/lib/python3.9/site-packages/cassandra/__init__.py
class NullHandler(logging.Handler):

    def emit(self, record):
        pass

logging.getLogger('cassandra').addHandler(NullHandler())
logging.basicConfig(filename='/tmp/cqlsh.log', encoding='utf-8', level=logging.DEBUG)                     # This is the addition to output the log to file

__version_info__ = (3, 29, 0)
__version__ = '.'.join(map(str, __version_info__))

   #+END_SRC
** Output log from connection.py
   #+BEGIN_SRC
... ...
log.debug("This is the test log to file")
... ...
   #+END_SRC
* cassandra install
** Install cassanrda
   Please refer to the [[https://cassandra.apache.org/doc/stable/cassandra/getting_started/installing.html][link]] to install the cassandra
** Compile from source code
   #+BEGIN_SRC
workstation$ apt-get install ant
workstation$ apt-get install maven
workstation$ apt-get install java-openjdk11
workstation$ git clone https://github.com/apache/cassandra.git
workstation$ ./build-shaded-dtest-jar.sh
workstation$ sudo more /etc/init.d/cassandra
... ...
#CASSANDRA_HOME=/usr/share/cassandra
#jay:
CASSANDRA_HOME=/opt/workspace/cassandra/build
... ...
#[ -e /usr/share/cassandra/apache-cassandra.jar ] || exit 0
# jay: added the compiled jar
[ -e /opt/workspace/cassandra/build/apache-cassandra-5.1-SNAPSHOT.jar ] || exit 0
[ -e /etc/cassandra/cassandra.yaml ] || exit 0
[ -e /etc/cassandra/cassandra-env.sh ] || exit 0
workstation$ sudo systemctl start cassandra
workstation$ ./bin/nodetool status 
Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load       Tokens  Owns (effective)  Host ID                               Rack 
UN  127.0.0.1  61.97 KiB  16      100.0%            6d194555-f6eb-41d0-c000-000000000001  rack1
workstation$ cqlsh 
/usr/bin/cqlsh.py:477: DeprecationWarning: Legacy execution parameters will be removed in 4.0. Consider using execution profiles.
/usr/bin/cqlsh.py:507: DeprecationWarning: Setting the consistency level at the session level will be removed in 4.0. Consider using execution profiles and setting the desired consistency level to the EXEC_PROFILE_DEFAULT profile.
WARNING: cqlsh was built against 4.1.4, but this server is 5.1.  All features may not work!
Connected to Test Cluster at 127.0.0.1:9042
[cqlsh 6.1.0 | Cassandra 5.1-SNAPSHOT | CQL spec 3.4.7 | Native protocol v5]
Use HELP for help.
cqlsh> 

   #+END_SRC
   
