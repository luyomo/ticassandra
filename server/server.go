package server

import (
    "fmt"
    "io"
    "os"
    "github.com/pierrec/lz4/v4"
    "strings"
    "net"
    "encoding/binary"
    "regexp"
    "encoding/hex"
    "time"
    "bufio"
    "hash/crc32"
    _ "github.com/go-sql-driver/mysql"
    "github.com/luyomo/ticql/pkg/tidb"
    "database/sql"
    //"bytes"
)

// TCPServer struct
type TCPServer struct {
    Bind string
    Port int
}

type QueryOption struct {
    Query        string
    Timestamp    string
    FetchSize    int32
    PageSizeByte int32
    PageOption   []byte
}

type QueryMessage struct {
    Version       byte
    Option        byte
    StreamID      int16
    Operation     byte
    BodyOption    int16
    Length        int32
    // PayLoad   string
    PayLoad  QueryOption
}

type SupportedVersion struct {
     ProtocolVersion []string
     Compression []string
     CQLVersion []string
}

const (
    CRC32_INITIAL_VALUE="fa2d55ca"
    CRC24_INIT = 0x875060
    CRC24_POLY = 0x1974F0B
    CRC24_LENGTH = 3
    // CRC32_LENGTH = 4

    _VALUES_FLAG = 0x01
    _SKIP_METADATA_FLAG = 0x02
    _PAGE_SIZE_FLAG = 0x04
    _WITH_PAGING_STATE_FLAG = 0x08
    _WITH_SERIAL_CONSISTENCY_FLAG = 0x10
    _PROTOCOL_TIMESTAMP_FLAG = 0x20
    // _NAMES_FOR_VALUES_FLAG = 0x40  # not used here
    _WITH_KEYSPACE_FLAG = 0x80
    _PREPARED_WITH_KEYSPACE_FLAG = 0x01
    _PAGE_SIZE_BYTES_FLAG = 0x40000000
    _PAGING_OPTIONS_FLAG = 0x80000000
)

// Start TCPServer
func (s *TCPServer) Start() {
    fmt.Printf("   ... ... started tcp echo server ... ... \n")
    ln, err := net.Listen("tcp", fmt.Sprintf("%s:%d", s.Bind, s.Port))
    defer ln.Close()
    if err != nil {
        panic(err)
    }

    responseHeader := NewResponseHeader(0x85, 0, 0)

    supportedVersion := NewStringMultiMap(responseHeader)
    supportedVersion.Append("PROTOCOL_VERSIONS", []string{"3/v3", "4/v4", "5/v5", "6/v6-beta"} )
    supportedVersion.Append("COMPRESSION", []string{"snappy", "lz4"})
    supportedVersion.Append("CQL_VERSION", []string{"3.4.7"} )

    fmt.Printf("string map value: %#v \n", supportedVersion.ToString())
    fmt.Printf("string map value: %#v \n", supportedVersion.ToBytes())

    // responseHeader := NewResponseHeader(0x85, 0, 0)
    fmt.Printf("string map value: %#v \n", responseHeader.ToString())
    fmt.Printf("string map value: %#v \n", responseHeader.ToBytes())

    timeoutDuration := 2 * time.Minute
    for {
        //message := "0000000000000000000"
        var message []byte
        conn, err := ln.Accept()
        if err != nil {
            panic(err)
        }

        fmt.Println("\n\n\nStarting to collect data ********** ********** ")
        conn.SetReadDeadline(time.Now().Add(timeoutDuration))
        writer := bufio.NewWriter(conn)
        go func(conn net.Conn ) {
            db, err := sql.Open("mysql", "cqluser:cqluser@tcp(10.128.0.21:4000)/test")
            if err != nil {
                panic (err) 
                return
            }
            defer db.Close()

            sessionVersion := 0
            defer conn.Close()
            for {
                tableName := ""

                fmt.Println("\n\n\nStarting to collect data ********** ********** ")
		packet, err := NewACPacket(conn) 
		if err != nil {
                    panic(err)
		}
		msg := packet.GetBuffer()
		readLen := packet.GetLength()
		if err := packet.DecodeHeader(); err != nil {
                    panic(err)
		}
		header := packet.GetHeader()
		fmt.Printf("The Header: %s \n\n", header.ToString())

		_, err = packet.DecodeBody() 
		if err != nil {
                    panic(err)
		}

                //msg := make([]byte, 4096)
                // readLen, err := conn.Read(msg)
		// fmt.Println(fmt.Sprintf("Gathered the info from remote len: <%d>, message: <%#v> ", readLen, bytes.Trim(msg, "\x00") ))
                // if err != nil {
                //     fmt.Printf("Errorr %s", err)
                //     panic(err)
                // }
                // fmt.Println(msg)
                //fmt.Printf("%x\n", msg)
                version := int(msg[0])
                op := int(msg[4])

                var queryMessages []QueryMessage
                if sessionVersion != 0 && version != sessionVersion {
                    for _idx, _char := range msg {
                        if _char == 0x05 && msg[_idx + 4] == 0x07  {
                            fmt.Println(_idx, _char, msg[_idx + 4])
                            var queryMessage QueryMessage
                            queryMessage.Version   = _char
                            queryMessage.Option    = msg[_idx + 1]
                            queryMessage.StreamID  = int16(binary.BigEndian.Uint16(msg[_idx + 2: _idx + 4]))
                            queryMessage.Operation = msg[_idx + 4]
                            queryMessage.BodyOption    = int16(binary.BigEndian.Uint32(msg[_idx+5:_idx+9]))
                            queryMessage.Length    = int32(binary.BigEndian.Uint32(msg[_idx+9:_idx+17]))
                            var queryOption QueryOption
                            fmt.Printf("The raw data is: <%x>\n", msg[:readLen])
                            fmt.Printf("Length: %x, expected size: <%x> \n", readLen, queryMessage.Length)
                            queryOption.Query = string(msg[_idx+13:int32(_idx)+13+queryMessage.Length])
                            queryMessage.PayLoad = queryOption
                            fmt.Printf("The message is <%#v>", queryMessage)

                            queryMessages = append(queryMessages, queryMessage)
                        }
                    }
                    fmt.Println("------------------------")
                    //fmt.Printf("The data is <%v> \n", queryMessages)

                    version = int(msg[6])
                    op = int(msg[10])
                    if op == 0x0b {
                        data := string(msg[16:35])
                        data02 := string(msg[36:50])
                        data03 := string(msg[51:64])
                        //data := string(msg[16:])
                        fmt.Printf("data: <%s>\n", data)
                        fmt.Printf("data: <%s>\n", data02)
                        fmt.Printf("data: <%s>\n", data03)
                    }

                    for _, queryMessage := range queryMessages {
                        //fmt.Printf("Processing the message: %v \n", queryMessage)
                        if queryMessage.Operation == 0x07 {
                            re01 := regexp.MustCompile("(?i).*FROM (.*?) ")
                            re02 := regexp.MustCompile("(?i).*FROM (.*)$")
                            match01 := re01.FindStringSubmatch(queryMessage.PayLoad.Query)
                            if len(match01) > 1 {
                                tableName = match01[1]
                            } else {
                                match02 := re02.FindStringSubmatch(queryMessage.PayLoad.Query)
                                if len(match02) > 1 {
                                    tableName = match02[1]
                                } else {
                                    fmt.Printf("???Not matched: The querey is <%s> \n", queryMessage.PayLoad.Query)
                                }

                            }
                            fmt.Printf("version: <%x>, opt: <%x>, tableName: <%s> \n", version, op, tableName )
                            //fmt.Printf("version: <%x>, opt: <%x>, tableName: <%x> <-> <%x> \n", version, op, tableName, "system.peers_v2" )
                            //compressLz4()

                            if tableName == "system.peers_v2" {
                                fmt.Println("peers_v2: data sending")
                                message=returnPeerV2(queryMessage)
                                writer.WriteString(string(message))
                                writer.Flush()
                                continue
                            }
                            if tableName == "system.local" {
                                fmt.Println("local: data sending")
                                message=returnLocal(queryMessage)
                                writer.WriteString(string(message))
                                writer.Flush()
                                continue
                            }
                            if tableName == "system_schema.keyspaces" {
                                output := tidb.QueryAnything(db, "select host, db as keyspace_name, user from mysql.db" )
                                message2Send := compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08, output)
                                writer.WriteString(string(message2Send))
                                writer.Flush()
                                continue
                            }

                            if tableName == "system_schema.tables" {
                                fmt.Println("tables: data sending")
                                //output := tidb.QueryAnything(db, "SELECT table_schema as keyspace_name, table_name FROM information_schema.tables" )
                                output := tidb.QueryAnything(db, "SELECT table_schema as keyspace_name, table_name FROM information_schema.tables where table_schema not in ( 'INFORMATION_SCHEMA', 'mysql' )" )
                                message2Send := compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08, output)
                                writer.WriteString(string(message2Send))
                                writer.Flush()
                                continue
                            }
                            if tableName == "system_schema.columns" {
                                fmt.Println("tables: data sending")
                                output := tidb.QueryAnything(db, "select table_schema as keyspace_name, table_name as table_name, column_name as column_name, ORDINAL_POSITION as position, COLUMN_TYPE as type from information_schema.columns" )
                                message2Send := compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08, output)
                                writer.WriteString(string(message2Send))
                                writer.Flush()
                                continue
                            }
                            if tableName == "system_schema.types" {
                                fmt.Println("types: data sending")
                                message=returnTypes(queryMessage)
                                writer.WriteString(string(message))
                                writer.Flush()
                                continue
                            }
                            if tableName == "system_schema.functions" {
                                fmt.Println("functions: data sending")
                                message=returnFunctions(queryMessage)
                                writer.WriteString(string(message))
                                writer.Flush()
                                continue
                            }
                            if tableName == "system_schema.aggregates" {
                                fmt.Println("aggregates: data sending")
                                message=returnAggregates(queryMessage)
                                writer.WriteString(string(message))
                                writer.Flush()
                                continue
                            }
                            if tableName == "system_schema.triggers" {
                                fmt.Println("triggers: data sending")
                                message=returnTriggers(queryMessage)
                                writer.WriteString(string(message))
                                writer.Flush()
                                continue
                            }
                            if tableName == "system_schema.indexes" {
                                fmt.Println("indexes: data sending")
                                message=returnIndexes(queryMessage)
                                writer.WriteString(string(message))
                                writer.Flush()
                                continue
                            }
                            if tableName == "system_schema.views" {
                                fmt.Println("views: data sending")
                                message=returnViews(queryMessage)
                                writer.WriteString(string(message))
                                writer.Flush()
                                continue
                            }
                            if tableName == "system_virtual_schema.keyspaces" {
                                fmt.Println("Virtual keyspace: data sending")
                                message=returnVirtualKeySpaces(queryMessage)
                                writer.WriteString(string(message))
                                writer.Flush()
                                continue
                            }
                            if tableName == "system_virtual_schema.tables" {
                                fmt.Println("Virtual table: data sending")
                                message=returnVirtualTables(queryMessage)
                                writer.WriteString(string(message))
                                writer.Flush()
                                continue
                            }
                            if tableName == "system_virtual_schema.columns" {
                                fmt.Println("Virtual columns: data sending")
                                decodedByteArray, _ :=  hex.DecodeString("163d02e657ce850000100800003d0d000000020000000100000008001573797374656d5f7669727475616c5f736368656d610007636f6c756d6e73000d6b657973706163655f6e616d65000d000a7461626c655f6e616d65000d000b636f6c756d6e5f6e616d65000d0010636c7573746572696e675f6f72646572000d0011636f6c756d6e5f6e616d655f6279746573000300046b696e64000d0008706f736974696f6e0009000474797065000d000000970000000c73797374656d5f7669657773000000066361636865730000000e63617061636974795f6279746573000000046e6f6e650000000e63617061636974795f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f7669657773000000066361636865730000000b656e7472795f636f756e74000000046e6f6e650000000b656e7472795f636f756e7400000007726567756c617200000004ffffffff00000003696e740000000c73797374656d5f766965777300000006636163686573000000096869745f636f756e74000000046e6f6e65000000096869745f636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000006636163686573000000096869745f726174696f000000046e6f6e65000000096869745f726174696f00000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000006636163686573000000046e616d65000000046e6f6e65000000046e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f7669657773000000066361636865730000001a726563656e745f6869745f726174655f7065725f7365636f6e64000000046e6f6e650000001a726563656e745f6869745f726174655f7065725f7365636f6e6400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f7669657773000000066361636865730000001e726563656e745f726571756573745f726174655f7065725f7365636f6e64000000046e6f6e650000001e726563656e745f726571756573745f726174655f7065725f7365636f6e6400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f7669657773000000066361636865730000000d726571756573745f636f756e74000000046e6f6e650000000d726571756573745f636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f7669657773000000066361636865730000000a73697a655f6279746573000000046e6f6e650000000a73697a655f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000007636c69656e74730000000761646472657373000000046e6f6e6500000007616464726573730000000d706172746974696f6e5f6b6579000000040000000000000004696e65740000000c73797374656d5f766965777300000007636c69656e747300000010636f6e6e656374696f6e5f7374616765000000046e6f6e6500000010636f6e6e656374696f6e5f737461676500000007726567756c617200000004ffffffff00000004746578740000000c73797374656d5f766965777300000007636c69656e74730000000b6472697665725f6e616d65000000046e6f6e650000000b6472697665725f6e616d6500000007726567756c617200000004ffffffff00000004746578740000000c73797374656d5f766965777300000007636c69656e74730000000e6472697665725f76657273696f6e000000046e6f6e650000000e6472697665725f76657273696f6e00000007726567756c617200000004ffffffff00000004746578740000000c73797374656d5f766965777300000007636c69656e747300000008686f73746e616d65000000046e6f6e6500000008686f73746e616d6500000007726567756c617200000004ffffffff00000004746578740000000c73797374656d5f766965777300000007636c69656e747300000004706f72740000000361736300000004706f72740000000a636c7573746572696e67000000040000000000000003696e740000000c73797374656d5f766965777300000007636c69656e74730000001070726f746f636f6c5f76657273696f6e000000046e6f6e650000001070726f746f636f6c5f76657273696f6e00000007726567756c617200000004ffffffff00000003696e740000000c73797374656d5f766965777300000007636c69656e74730000000d726571756573745f636f756e74000000046e6f6e650000000d726571756573745f636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000007636c69656e74730000001073736c5f6369706865725f7375697465000000046e6f6e650000001073736c5f6369706865725f737569746500000007726567756c617200000004ffffffff00000004746578740000000c73797374656d5f766965777300000007636c69656e74730000000b73736c5f656e61626c6564000000046e6f6e650000000b73736c5f656e61626c656400000007726567756c617200000004ffffffff00000007626f6f6c65616e0000000c73797374656d5f766965777300000007636c69656e74730000000c73736c5f")
                                writer.WriteString(string(decodedByteArray))
                                decodedByteArray, _ =  hex.DecodeString("70726f746f636f6c000000046e6f6e650000000c73736c5f70726f746f636f6c00000007726567756c617200000004ffffffff00000004746578740000000c73797374656d5f766965777300000007636c69656e747300000008757365726e616d65000000046e6f6e6500000008757365726e616d6500000007726567756c617200000004ffffffff00000004746578740000000c73797374656d5f766965777300000018636f6f7264696e61746f725f726561645f6c6174656e637900000005636f756e74000000046e6f6e6500000005636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000018636f6f7264696e61746f725f726561645f6c6174656e63790000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f766965777300000018636f6f7264696e61746f725f726561645f6c6174656e6379000000066d61785f6d73000000046e6f6e65000000066d61785f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000018636f6f7264696e61746f725f726561645f6c6174656e63790000000870353074685f6d73000000046e6f6e650000000870353074685f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000018636f6f7264696e61746f725f726561645f6c6174656e63790000000870393974685f6d73000000046e6f6e650000000870393974685f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000018636f6f7264696e61746f725f726561645f6c6174656e63790000000a7065725f7365636f6e64000000046e6f6e650000000a7065725f7365636f6e6400000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000018636f6f7264696e61746f725f726561645f6c6174656e63790000000a7461626c655f6e616d65000000046e6f6e650000000a7461626c655f6e616d650000000d706172746974696f6e5f6b6579000000040000000100000004746578740000000c73797374656d5f766965777300000018636f6f7264696e61746f725f7363616e5f6c6174656e637900000005636f756e74000000046e6f6e6500000005636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000018636f6f7264696e61746f725f7363616e5f6c6174656e63790000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f766965777300000018636f6f7264696e61746f725f7363616e5f6c6174656e6379000000066d61785f6d73000000046e6f6e65000000066d61785f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000018636f6f7264696e61746f725f7363616e5f6c6174656e63790000000870353074685f6d73000000046e6f6e650000000870353074685f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000018636f6f7264696e61746f725f7363616e5f6c6174656e63790000000870393974685f6d73000000046e6f6e650000000870393974685f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000018636f6f7264696e61746f725f7363616e5f6c6174656e63790000000a7065725f7365636f6e64000000046e6f6e650000000a7065725f7365636f6e6400000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000018636f6f7264696e61746f725f7363616e5f6c6174656e63790000000a7461626c655f6e616d65000000046e6f6e650000000a7461626c655f6e616d650000000d706172746974696f6e5f6b6579000000040000000100000004746578740000000c73797374656d5f766965777300000019636f6f7264696e61746f725f77726974655f6c6174656e637900000005636f756e74000000046e6f6e6500000005636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000019636f6f7264696e61746f725f77726974655f6c6174656e63790000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f766965777300000019636f6f7264696e61746f725f77726974655f6c6174656e6379000000066d61785f6d73000000046e6f6e65000000066d61785f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000019636f6f7264696e61746f725f77726974655f6c6174656e63790000000870353074685f6d73000000046e6f6e650000000870353074685f6d730000")
                                writer.WriteString(string(decodedByteArray))
                                decodedByteArray, _ =  hex.DecodeString("0007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000019636f6f7264696e61746f725f77726974655f6c6174656e63790000000870393974685f6d73000000046e6f6e650000000870393974685f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000019636f6f7264696e61746f725f77726974655f6c6174656e63790000000a7065725f7365636f6e64000000046e6f6e650000000a7065725f7365636f6e6400000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000019636f6f7264696e61746f725f77726974655f6c6174656e63790000000a7461626c655f6e616d65000000046e6f6e650000000a7461626c655f6e616d650000000d706172746974696f6e5f6b6579000000040000000100000004746578740000000c73797374656d5f76696577730000000a6469736b5f75736167650000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f76696577730000000a6469736b5f7573616765000000096d6562696279746573000000046e6f6e65000000096d656269627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f76696577730000000a6469736b5f75736167650000000a7461626c655f6e616d65000000046e6f6e650000000a7461626c655f6e616d650000000d706172746974696f6e5f6b6579000000040000000100000004746578740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000761646472657373000000046e6f6e6500000007616464726573730000000d706172746974696f6e5f6b6579000000040000000000000004696e65740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e6400000018636f72727570745f6672616d65735f7265636f7665726564000000046e6f6e6500000018636f72727570745f6672616d65735f7265636f766572656400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000001a636f72727570745f6672616d65735f756e7265636f7665726564000000046e6f6e650000001a636f72727570745f6672616d65735f756e7265636f766572656400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e64000000026463000000036173630000000264630000000a636c7573746572696e67000000040000000000000004746578740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000b6572726f725f6279746573000000046e6f6e650000000b6572726f725f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000b6572726f725f636f756e74000000046e6f6e650000000b6572726f725f636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000d657870697265645f6279746573000000046e6f6e650000000d657870697265645f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000d657870697265645f636f756e74000000046e6f6e650000000d657870697265645f636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e6400000004706f7274000000046e6f6e6500000004706f72740000000d706172746974696f6e5f6b6579000000040000000100000003696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000f70726f6365737365645f6279746573000000046e6f6e650000000f70726f6365737365645f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000f70726f6365737365645f636f756e74000000046e6f6e650000000f70726f6365737365645f636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e64000000047261636b00000003617363000000047261636b0000000a636c7573746572696e67000000040000000100000004746578740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000e72656365697665645f6279746573000000046e6f6e650000000e72656365697665645f627974657300000007726567756c617200000004ffffffff00000006626967696e74000000")
                                writer.WriteString(string(decodedByteArray))
                                decodedByteArray, _ =  hex.DecodeString("0c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000e72656365697665645f636f756e74000000046e6f6e650000000e72656365697665645f636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000f7363686564756c65645f6279746573000000046e6f6e650000000f7363686564756c65645f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000f7363686564756c65645f636f756e74000000046e6f6e650000000f7363686564756c65645f636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000f7468726f74746c65645f636f756e74000000046e6f6e650000000f7468726f74746c65645f636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000f7468726f74746c65645f6e616e6f73000000046e6f6e650000000f7468726f74746c65645f6e616e6f7300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e640000000b7573696e675f6279746573000000046e6f6e650000000b7573696e675f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e64000000137573696e675f726573657276655f6279746573000000046e6f6e65000000137573696e675f726573657276655f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e64000000126163746976655f636f6e6e656374696f6e73000000046e6f6e65000000126163746976655f636f6e6e656374696f6e7300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e640000000761646472657373000000046e6f6e6500000007616464726573730000000d706172746974696f6e5f6b6579000000040000000000000004696e65740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e6400000013636f6e6e656374696f6e5f617474656d707473000000046e6f6e6500000013636f6e6e656374696f6e5f617474656d70747300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e64000000026463000000036173630000000264630000000a636c7573746572696e67000000040000000000000004746578740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e640000000b6572726f725f6279746573000000046e6f6e650000000b6572726f725f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e640000000b6572726f725f636f756e74000000046e6f6e650000000b6572726f725f636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e640000000d657870697265645f6279746573000000046e6f6e650000000d657870697265645f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e640000000d657870697265645f636f756e74000000046e6f6e650000000d657870697265645f636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e640000000e6f7665726c6f61645f6279746573000000046e6f6e650000000e6f7665726c6f61645f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e640000000e6f7665726c6f61645f636f756e74000000046e6f6e650000000e6f7665726c6f61645f636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e640000000d70656e64696e675f6279746573000000046e6f6e650000000d70656e64696e675f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e640000000d70656e64696e675f636f756e74000000046e6f6e650000000d70656e64696e675f636f756e740000")
                                writer.WriteString(string(decodedByteArray))
                                decodedByteArray, _ =  hex.DecodeString("0007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e6400000004706f7274000000046e6f6e6500000004706f72740000000d706172746974696f6e5f6b6579000000040000000100000003696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e64000000047261636b00000003617363000000047261636b0000000a636c7573746572696e67000000040000000100000004746578740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e640000000a73656e745f6279746573000000046e6f6e650000000a73656e745f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e640000000a73656e745f636f756e74000000046e6f6e650000000a73656e745f636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e640000001e7375636365737366756c5f636f6e6e656374696f6e5f617474656d707473000000046e6f6e650000001e7375636365737366756c5f636f6e6e656374696f6e5f617474656d70747300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e640000000b7573696e675f6279746573000000046e6f6e650000000b7573696e675f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e64000000137573696e675f726573657276655f6279746573000000046e6f6e65000000137573696e675f726573657276655f627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f7669657773000000126c6f63616c5f726561645f6c6174656e637900000005636f756e74000000046e6f6e6500000005636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f7669657773000000126c6f63616c5f726561645f6c6174656e63790000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f7669657773000000126c6f63616c5f726561645f6c6174656e6379000000066d61785f6d73000000046e6f6e65000000066d61785f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f7669657773000000126c6f63616c5f726561645f6c6174656e63790000000870353074685f6d73000000046e6f6e650000000870353074685f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f7669657773000000126c6f63616c5f726561645f6c6174656e63790000000870393974685f6d73000000046e6f6e650000000870393974685f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f7669657773000000126c6f63616c5f726561645f6c6174656e63790000000a7065725f7365636f6e64000000046e6f6e650000000a7065725f7365636f6e6400000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f7669657773000000126c6f63616c5f726561645f6c6174656e63790000000a7461626c655f6e616d65000000046e6f6e650000000a7461626c655f6e616d650000000d706172746974696f6e5f6b6579000000040000000100000004746578740000000c73797374656d5f7669657773000000126c6f63616c5f7363616e5f6c6174656e637900000005636f756e74000000046e6f6e6500000005636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f7669657773000000126c6f63616c5f7363616e5f6c6174656e63790000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f7669657773000000126c6f63616c5f7363616e5f6c6174656e6379000000066d61785f6d73000000046e6f6e65000000066d61785f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f7669657773000000126c6f63616c5f7363616e5f6c6174656e63790000000870353074685f6d73000000046e6f6e650000000870353074685f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f7669657773000000126c6f63616c5f7363616e5f6c6174656e63790000000870393974685f6d73000000046e6f6e650000000870393974685f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f7669657773000000126c6f63616c5f7363616e5f6c6174656e63790000000a7065725f7365636f6e6400")
                                writer.WriteString(string(decodedByteArray))
                                decodedByteArray, _ =  hex.DecodeString("0000046e6f6e650000000a7065725f7365636f6e6400000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f7669657773000000126c6f63616c5f7363616e5f6c6174656e63790000000a7461626c655f6e616d65000000046e6f6e650000000a7461626c655f6e616d650000000d706172746974696f6e5f6b6579000000040000000100000004746578740000000c73797374656d5f7669657773000000136c6f63616c5f77726974655f6c6174656e637900000005636f756e74000000046e6f6e6500000005636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f7669657773000000136c6f63616c5f77726974655f6c6174656e63790000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f7669657773000000136c6f63616c5f77726974655f6c6174656e6379000000066d61785f6d73000000046e6f6e65000000066d61785f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f7669657773000000136c6f63616c5f77726974655f6c6174656e63790000000870353074685f6d73000000046e6f6e650000000870353074685f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f7669657773000000136c6f63616c5f77726974655f6c6174656e63790000000870393974685f6d73000000046e6f6e650000000870393974685f6d7300000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f7669657773000000136c6f63616c5f77726974655f6c6174656e63790000000a7065725f7365636f6e64000000046e6f6e650000000a7065725f7365636f6e6400000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f7669657773000000136c6f63616c5f77726974655f6c6174656e63790000000a7461626c655f6e616d65000000046e6f6e650000000a7461626c655f6e616d650000000d706172746974696f6e5f6b6579000000040000000100000004746578740000000c73797374656d5f7669657773000000126d61785f706172746974696f6e5f73697a650000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f7669657773000000126d61785f706172746974696f6e5f73697a65000000096d6562696279746573000000046e6f6e65000000096d656269627974657300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f7669657773000000126d61785f706172746974696f6e5f73697a650000000a7461626c655f6e616d65000000046e6f6e650000000a7461626c655f6e616d650000000d706172746974696f6e5f6b6579000000040000000100000004746578740000000c73797374656d5f76696577730000000d726f77735f7065725f7265616400000005636f756e74000000046e6f6e6500000005636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f76696577730000000d726f77735f7065725f726561640000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f76696577730000000d726f77735f7065725f72656164000000036d6178000000046e6f6e65000000036d617800000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f76696577730000000d726f77735f7065725f72656164000000057035307468000000046e6f6e6500000005703530746800000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f76696577730000000d726f77735f7065725f72656164000000057039397468000000046e6f6e6500000005703939746800000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f76696577730000000d726f77735f7065725f726561640000000a7461626c655f6e616d65000000046e6f6e650000000a7461626c655f6e616d650000000d706172746974696f6e5f6b6579000000040000000100000004746578740000000c73797374656d5f76696577730000000873657474696e6773000000046e616d65000000046e6f6e65000000046e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f76696577730000000873657474696e67730000000576616c7565000000046e6f6e650000000576616c756500000007726567756c617200000004ffffffff00000004746578740000000c73797374656d5f76696577730000000d73737461626c655f7461736b7300000010636f6d706c6574696f6e5f726174696f000000046e6f6e6500000010636f6d706c6574696f6e5f726174696f00000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f76696577730000000d")
                                writer.WriteString(string(decodedByteArray))
                                decodedByteArray, _ =  hex.DecodeString("73737461626c655f7461736b730000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f76696577730000000d73737461626c655f7461736b73000000046b696e64000000046e6f6e65000000046b696e6400000007726567756c617200000004ffffffff00000004746578740000000c73797374656d5f76696577730000000d73737461626c655f7461736b730000000870726f6772657373000000046e6f6e650000000870726f677265737300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f76696577730000000d73737461626c655f7461736b730000000a7461626c655f6e616d65000000036173630000000a7461626c655f6e616d650000000a636c7573746572696e67000000040000000000000004746578740000000c73797374656d5f76696577730000000d73737461626c655f7461736b73000000077461736b5f696400000003617363000000077461736b5f69640000000a636c7573746572696e67000000040000000100000004757569640000000c73797374656d5f76696577730000000d73737461626c655f7461736b7300000005746f74616c000000046e6f6e6500000005746f74616c00000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f76696577730000000d73737461626c655f7461736b7300000004756e6974000000046e6f6e6500000004756e697400000007726567756c617200000004ffffffff00000004746578740000000c73797374656d5f76696577730000001173797374656d5f70726f70657274696573000000046e616d65000000046e6f6e65000000046e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f76696577730000001173797374656d5f70726f706572746965730000000576616c7565000000046e6f6e650000000576616c756500000007726567756c617200000004ffffffff00000004746578740000000c73797374656d5f76696577730000000c7468726561645f706f6f6c730000000c6163746976655f7461736b73000000046e6f6e650000000c6163746976655f7461736b7300000007726567756c617200000004ffffffff00000003696e740000000c73797374656d5f76696577730000000c7468726561645f706f6f6c73000000126163746976655f7461736b735f6c696d6974000000046e6f6e65000000126163746976655f7461736b735f6c696d697400000007726567756c617200000004ffffffff00000003696e740000000c73797374656d5f76696577730000000c7468726561645f706f6f6c730000000d626c6f636b65645f7461736b73000000046e6f6e650000000d626c6f636b65645f7461736b7300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f76696577730000000c7468726561645f706f6f6c7300000016626c6f636b65645f7461736b735f616c6c5f74696d65000000046e6f6e6500000016626c6f636b65645f7461736b735f616c6c5f74696d6500000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f76696577730000000c7468726561645f706f6f6c730000000f636f6d706c657465645f7461736b73000000046e6f6e650000000f636f6d706c657465645f7461736b7300000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f76696577730000000c7468726561645f706f6f6c73000000046e616d65000000046e6f6e65000000046e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f76696577730000000c7468726561645f706f6f6c730000000d70656e64696e675f7461736b73000000046e6f6e650000000d70656e64696e675f7461736b7300000007726567756c617200000004ffffffff00000003696e740000000c73797374656d5f766965777300000013746f6d6273746f6e65735f7065725f7265616400000005636f756e74000000046e6f6e6500000005636f756e7400000007726567756c617200000004ffffffff00000006626967696e740000000c73797374656d5f766965777300000013746f6d6273746f6e65735f7065725f726561640000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000000c73797374656d5f766965777300000013746f6d6273746f6e65735f7065725f72656164000000036d6178000000046e6f6e65000000036d617800000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000013746f6d6273746f6e65735f7065725f72656164000000057035307468000000046e6f6e6500000005703530746800000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000013746f6d6273746f6e65735f7065725f72656164000000057039397468000000046e6f6e6500000005703939746800000007726567756c617200000004ffffffff00000006646f75626c650000000c73797374656d5f766965777300000013746f")
                                writer.WriteString(string(decodedByteArray))
                                decodedByteArray, _ =  hex.DecodeString("6d6273746f6e65735f7065725f726561640000000a7461626c655f6e616d65000000046e6f6e650000000a7461626c655f6e616d650000000d706172746974696f6e5f6b6579000000040000000100000004746578740000001573797374656d5f7669727475616c5f736368656d6100000007636f6c756d6e7300000010636c7573746572696e675f6f72646572000000046e6f6e6500000010636c7573746572696e675f6f7264657200000007726567756c617200000004ffffffff00000004746578740000001573797374656d5f7669727475616c5f736368656d6100000007636f6c756d6e730000000b636f6c756d6e5f6e616d65000000036173630000000b636f6c756d6e5f6e616d650000000a636c7573746572696e67000000040000000100000004746578740000001573797374656d5f7669727475616c5f736368656d6100000007636f6c756d6e7300000011636f6c756d6e5f6e616d655f6279746573000000046e6f6e6500000011636f6c756d6e5f6e616d655f627974657300000007726567756c617200000004ffffffff00000004626c6f620000001573797374656d5f7669727475616c5f736368656d6100000007636f6c756d6e730000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000001573797374656d5f7669727475616c5f736368656d6100000007636f6c756d6e73000000046b696e64000000046e6f6e65000000046b696e6400000007726567756c617200000004ffffffff00000004746578740000001573797374656d5f7669727475616c5f736368656d6100000007636f6c756d6e7300000008706f736974696f6e000000046e6f6e6500000008706f736974696f6e00000007726567756c617200000004ffffffff00000003696e740000001573797374656d5f7669727475616c5f736368656d6100000007636f6c756d6e730000000a7461626c655f6e616d65000000036173630000000a7461626c655f6e616d650000000a636c7573746572696e67000000040000000000000004746578740000001573797374656d5f7669727475616c5f736368656d6100000007636f6c756d6e730000000474797065000000046e6f6e65000000047479706500000007726567756c617200000004ffffffff00000004746578740000001573797374656d5f7669727475616c5f736368656d61000000096b65797370616365730000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000001573797374656d5f7669727475616c5f736368656d61000000067461626c657300000007636f6d6d656e74000000046e6f6e6500000007636f6d6d656e7400000007726567756c617200000004ffffffff00000004746578740000001573797374656d5f7669727475616c5f736368656d61000000067461626c65730000000d6b657973706163655f6e616d65000000046e6f6e650000000d6b657973706163655f6e616d650000000d706172746974696f6e5f6b6579000000040000000000000004746578740000001573797374656d5f7669727475616c5f736368656d61000000067461626c65730000000a7461626c655f6e616d65000000036173630000000a7461626c655f6e616d650000000a636c7573746572696e67000000040000000000000004746578740b3a56f3")
                                writer.WriteString(string(decodedByteArray))
                                writer.Flush()   // 31296
                                continue
                            }
                            fmt.Println("peers_v2: data sending")
                            message=returnDefault(db, queryMessage)
                            fmt.Printf("The data to send is <%x>", message)
                            writer.WriteString(string(message))
                            writer.Flush()
                        }
                    }
                } else {
                    fmt.Printf("The version is %x and the opt is %x \n", version, op )
                }

                if  version == 66 &&  op == 5 {
                    // message=returnUnsupport01()
                    conn.Write(message)
		    //fmt.Printf("Bytes to send: %#v", supportedVersion.ToBytes() )

		    //conn.Write(supportedVersion.ToBytes())
                    break
                }
                if  version == 65 &&  op == 5 {
                    // message=returnUnsupported02()
                    conn.Write(message)
                    // conn.Write(supportedVersion.ToBytes())
                    break
                }
                if version == 5 && op == 5 {
                    sessionVersion = 5
                    message=returnServerMeta()
                    // conn.Write(message)
                    conn.Write(supportedVersion.ToBytes())
                }
                if version == 5 && op == 1 {
                    message=returnStartup()
                    conn.Write(message)
                }
                if version == 5 && op == 0x0b {
                    message=returnMsg01()
                    conn.Write(message)
                }
            }
        }(conn)
        fmt.Println(">>>>>>>>>>>")
    }
}

// func returnUnsupport01() []byte{
//     decodedByteArray, _ :=  hex.DecodeString("8500000000000000680000000a0062496e76616c6964206f7220756e737570706f727465642070726f746f636f6c2076657273696f6e20283636293b20737570706f727465642076657273696f6e73206172652028332f76332c20342f76342c20352f76352c20362f76362d6265746129")
//     // 85    00   00   00   00   00   00   00    68   00   00  000a0062496e76616c6964206f7220756e737570706f727465642070726f746f636f6c2076657273696f6e20283636293b20737570706f727465642076657273696f6e73206172652028332f76332c20342f76342c20352f76352c20362f76362d6265746129
//     // 0x85, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6f, 0x0, 0x3, 0x0, 0x11, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x0, 0x4, 0x0, 0x4, 0x33, 0x2f, 0x76, 0x33, 0x0, 0x4, 0x34, 0x2f, 0x76, 0x34, 0x0, 0x4, 0x35, 0x2f, 0x76, 0x35, 0x0, 0x9, 0x36, 0x2f, 0x76, 0x36, 0x2d, 0x62, 0x65, 0x74, 0x61, 0x0, 0xb, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x0, 0x2, 0x0, 0x6, 0x73, 0x6e, 0x61, 0x70, 0x70, 0x79, 0x0, 0x3, 0x6c, 0x7a, 0x34, 0x0, 0xb, 0x43, 0x51, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x0, 0x1, 0x0, 0x5, 0x33, 0x2e, 0x34, 0x2e, 0x37
//     return decodedByteArray
// }

// func returnUnsupported02() []byte{
//     decodedByteArray, _ :=  hex.DecodeString("8500000000000000680000000a0062496e76616c6964206f7220756e737570706f727465642070726f746f636f6c2076657273696f6e20283636293b20737570706f727465642076657273696f6e73206172652028332f76332c20342f76342c20352f76352c20362f76362d6265746129")
//     return decodedByteArray
// }

func returnServerMeta() []byte{
    decodedByteArray, _ :=  hex.DecodeString("8500000006000000660003001150524f544f434f4c5f56455253494f4e5300040004332f76330004342f76340004352f76350009362f76362d62657461000b434f4d5052455353494f4e00020006736e6170707900036c7a34000b43514c5f56455253494f4e00010005332e342e35")
    return decodedByteArray
}

func returnStartup() []byte{
    decodedByteArray, _ :=  hex.DecodeString("850000010200000000")
    return decodedByteArray
}

func returnMsg01() []byte{
    decodedByteArray, _ :=  hex.DecodeString("090002a4c8c185000002020000000044fb95d4")
    return decodedByteArray
}

func returnPeerV2(queryMessage QueryMessage) []byte{
    return compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08, "00000002000000010000000c000673797374656d000870656572735f763200047065657200100009706565725f706f72740009000b646174615f63656e746572000d0007686f73745f6964000c000e6e61746976655f616464726573730010000b6e61746976655f706f72740009000c7072656665727265645f69700010000e7072656665727265645f706f7274000900047261636b000d000f72656c656173655f76657273696f6e000d000e736368656d615f76657273696f6e000c0006746f6b656e730022000d00000000")
}

func returnLocal(queryMessage QueryMessage) []byte{
    return compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08, "000000020000000100000014000673797374656d00056c6f63616c00036b6579000d000c626f6f747374726170706564000d001162726f6164636173745f616464726573730010000e62726f6164636173745f706f72740009000c636c75737465725f6e616d65000d000b63716c5f76657273696f6e000d000b646174615f63656e746572000d0011676f737369705f67656e65726174696f6e00090007686f73745f6964000c000e6c697374656e5f616464726573730010000b6c697374656e5f706f7274000900176e61746976655f70726f746f636f6c5f76657273696f6e000d000b706172746974696f6e6572000d00047261636b000d000f72656c656173655f76657273696f6e000d000b7270635f61646472657373001000087270635f706f72740009000e736368656d615f76657273696f6e000c0006746f6b656e730022000d000c7472756e63617465645f61740021000c000300000001000000056c6f63616c00000009434f4d504c4554454400000004c0a8016a0000000400001b580000000c5465737420436c757374657200000005332e342e350000000b6461746163656e74657231000000046131f7b9000000100d36697ecd054a0b8b36f8e8fc1d884200000004c0a8016a0000000400001b5800000001350000002b6f72672e6170616368652e63617373616e6472612e6468742e4d75726d757233506172746974696f6e6572000000057261636b3100000005342e302e3000000004000000000000000400002352000000102207c2a9f5983971986b2926e09e239d0000017900000010000000142d31343137323236323136393233393636343138000000142d32323631363032383634343135313238313734000000142d33333532383939393735313037333430343334000000142d34343438393431383735333432323738373233000000142d36323237353736313736313635383635383532000000142d37323035373231363238363831393739393237000000142d38383234373434393234333739303233323235000000133130393435343236323933313836343936333300000013323131323339343033343036313037363634380000001132333034323031323937383631363832300000001332393330303635393636363733343237343433000000133430303538323138343738393930303639383200000013343734313733373534303630393930303632330000001335383231313130333438303537353032323831000000133730363436333033353337333830393432353300000013383033313939343539363831363632393735320000005c0000000200000010176c39cdb93d33a5a2188eb06a56f66e000000140000017bab2f7afe0000001c0000017bab2fa72c00000010618f817b005f3678b8a453f3930b8e86000000140000017bab2f7afe0000001c0000017bab2fa428" )
}

// 05
func returnKeyspaces(queryMessage QueryMessage) []byte{
   return compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08, "000000020000000100000003000d73797374656d5f736368656d6100096b6579737061636573000d6b657973706163655f6e616d65000d000e64757261626c655f7772697465730004000b7265706c69636174696f6e0021000d000d000000050000000b73797374656d5f617574680000000101000000570000000200000005636c6173730000002b6f72672e6170616368652e63617373616e6472612e6c6f6361746f722e53696d706c655374726174656779000000127265706c69636174696f6e5f666163746f7200000001310000000d73797374656d5f736368656d6100000001010000003b0000000100000005636c6173730000002a6f72672e6170616368652e63617373616e6472612e6c6f6361746f722e4c6f63616c53747261746567790000001273797374656d5f64697374726962757465640000000101000000570000000200000005636c6173730000002b6f72672e6170616368652e63617373616e6472612e6c6f6361746f722e53696d706c655374726174656779000000127265706c69636174696f6e5f666163746f7200000001330000000673797374656d00000001010000003b0000000100000005636c6173730000002a6f72672e6170616368652e63617373616e6472612e6c6f6361746f722e4c6f63616c53747261746567790000000d73797374656d5f7472616365730000000101000000570000000200000005636c6173730000002b6f72672e6170616368652e63617373616e6472612e6c6f6361746f722e53696d706c655374726174656779000000127265706c69636174696f6e5f666163746f720000000132")
}

// 06
func returnTables() []byte{
    db, err := sql.Open("mysql", "cqluser:cqluser@192.168.1.108:4000/test")
    if err != nil {
        panic(err)
    }
    // See "Important settings" section.
    db.SetConnMaxLifetime(time.Minute * 3)
    db.SetMaxOpenConns(10)
    db.SetMaxIdleConns(10)

    return nil
}
//00000002               <- kind
//00000001               <- flag
//00000016               <- colcount
//000d 73797374656d5f736368656d61     <- keyspace name
//0006 7461626c6573                   <- table name
//000d 6b657973706163655f6e616d65 000d          <- keyspace_name
//000a 7461626c655f6e616d65 000d                <- table_name
//0017 6164646974696f6e616c5f77726974655f706f6c696379 000d   <- additional_write_policy
//0016 626c6f6f6d5f66696c7465725f66705f6368616e6365 0007   <- bloom_filter_fp_chance
//0007 63616368696e67 0021                                 <- caching
//000d 000d
//0003 636463 0004                                         <- cdc
//0007 636f6d6d656e74 000d                                 <- comment
//000a 636f6d70616374696f6e 0021                           <- compaction
//000d 000d 
//000b 636f6d7072657373696f6e 0021                         <- compression
//000d 000d
//0010 6372635f636865636b5f6368616e6365 0007                     <-crc_check_chance
//001a 64636c6f63616c5f726561645f7265706169725f6368616e6365 0007 <-dclocal_read_repair_chance
//0014 64656661756c745f74696d655f746f5f6c697665 0009             <- default_time_to_live
//000a 657874656e73696f6e73 0021                                  <-  extensions
//000d0003
//0005 666c616773 0022                                 <-  flags
//000d 
//0010 67635f67726163655f7365636f6e6473 0009          <- gc_grace_seconds
//0002 6964 000c                                       <- id
//0012 6d61785f696e6465785f696e74657276616c 0009       <- max_index_interval
//001b 6d656d7461626c655f666c7573685f706572696f645f696e5f6d73 0009   <- memtable_flush_period_in_ms
//0012 6d696e5f696e6465785f696e74657276616c 0009                     <- min_index_interval
//000b 726561645f726570616972 000d                                   <- read_repair
//0012 726561645f7265706169725f6368616e6365 0007                     <- read_repair_chance
//0011 73706563756c61746976655f7265747279 000d                       <- speculative_retry
//00000028                 rowcount
//0000000b 73797374656d5f61757468                             <- keyspace_name
//00000013 6e6574776f726b5f7065726d697373696f6e73             <- table_name
//00000003 393970                                             <- additional_write_policy
//00000008 3f847ae147ae147b                                   <- bloom_filter_fp_chance
//00000031 00000002000000046b65797300000003414c4c00000012726f77735f7065725f706172746974696f6e000000044e4f4e45  <- caching
//ffffffff    < cdc
//00000018 75736572206e6574776f726b207065726d697373696f6e73   <- comment
//0000007d 0000000300000005636c6173730000003f6f72672e6170616368652e63617373616e6472612e64622e636f6d70616374696f6e2e53697a65546965726564436f6d70616374696f6e53747261746567790000000d6d61785f7468726573686f6c640000000233320000000d6d696e5f7468726573686f6c640000000134    <- compaction
//0000005b 00000002000000126368756e6b5f6c656e6774685f696e5f6b6200000002313600000005636c6173730000002e6f72672e6170616368652e63617373616e6472612e696f2e636f6d70726573732e4c5a34436f6d70726573736f72   <- compression
//00000008 3ff0000000000000   <-  crc_check_chance
//00000008 0000000000000000                   <-  dclocal_read_repair_chance
//00000004 00000000                           <- 
//00000004 00000000                           <- extensions
//00000010 0000000100000008636f6d706f756e64   <- flags
//00000004 0076a700                           <- gc_grace_seconds
//00000010 d46780c22f1c3db9b4c1b8d9fbc0cc23   <- id
//00000004 00000800                            <- max_index_interval
//00000004 00000000                            <- memtable_flush_period_in_ms
//00000004 00000080                            <- min_index_interval
//00000008 424c4f434b494e47                    <- read_repair
//00000008 0000000000000000                  <- read_repair_chance
//00000003 393970                            <- speculative_retry
//
//    keyspace_name text,                    -> system_auth             ->   73797374656d5f61757468
//    table_name text,                       -> network_permissions     ->   6e6574776f726b5f7065726d697373696f6e73
//    additional_write_policy text,          -> 99p                     ->   393970
//    bloom_filter_fp_chance double,         -> 0.01                    ->   3f847ae147ae147b
//    caching frozen<map<text, text>>,       -> {'keys': 'ALL', 'rows_per_partition': 'NONE'}  ->  00000002000000046b65797300000003414c4c00000012726f77735f7065725f706172746974696f6e000000044e4f4e45
//    cdc boolean,                           -> null                                           ->  ffffffff
//    comment text,                          -> user network permissions                       ->  75736572206e6574776f726b207065726d697373696f6e73
//    compaction frozen<map<text, text>>,    -> {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'} ->   0000000300000005636c6173730000003f6f72672e6170616368652e63617373616e6472612e64622e636f6d70616374696f6e2e53697a65546965726564436f6d70616374696f6e53747261746567790000000d6d61785f7468726573686f 
//    compression frozen<map<text, text>>,   -> {'chunk_length_in_kb': '16', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}    -> 00000002000000126368756e6b5f6c656e6774685f696e5f6b6200000002313600000005636c6173730000002e6f72672e6170616368652e63617373616e6472612e696f2e636f6d70726573732e4c5a34436f6d70726573736f72
//    crc_check_chance double,               -> 1    -> 3ff0000000000000
//    dclocal_read_repair_chance double,     -> 0    -> 00000000
//    default_time_to_live int,              -> 0    -> 00000000
//    extensions frozen<map<text, blob>>,    -> {}   -> 00000000
//    flags frozen<set<text>>,               -> {'compound'}  -> 0000000100000008636f6d706f756e64
//    gc_grace_seconds int,                  -> 7776000       -> 0076a700
//    id uuid,                               -> d46780c2-2f1c-3db9-b4c1-b8d9fbc0cc23  -> d46780c22f1c3db9b4c1b8d9fbc0cc23
//    max_index_interval int,                -> 2048             -> 00000800
//    memtable_flush_period_in_ms int,       -> 0               -> 00000000
//    min_index_interval int,                -> 128              -> 00000080
//    read_repair text,                      -> BLOCKING         -> 424c4f434b494e47
//    read_repair_chance double,             -> 0                -> 0000000000000000
//    speculative_retry text,                -> 99p              -> 393970
//    PRIMARY KEY (keyspace_name, table_name)

// 07
func returnColumns() []byte{
    decodedByteArray, _ :=  hex.DecodeString("")
    return decodedByteArray
}

// 08
func returnTypes(queryMessage QueryMessage) []byte{
    return compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08, "000000020000000100000004000d73797374656d5f736368656d6100057479706573000d6b657973706163655f6e616d65000d0009747970655f6e616d65000d000b6669656c645f6e616d65730020000d000b6669656c645f74797065730020000d00000000")
}

// 09
func returnFunctions(queryMessage QueryMessage) []byte{
    return compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08,     "000000020000000100000008000d73797374656d5f736368656d61000966756e6374696f6e73000d6b657973706163655f6e616d65000d000d66756e6374696f6e5f6e616d65000d000e617267756d656e745f74797065730020000d000e617267756d656e745f6e616d65730020000d0004626f6479000d001463616c6c65645f6f6e5f6e756c6c5f696e707574000400086c616e6775616765000d000b72657475726e5f74797065000d00000000eed7996e")
}

// 10
func returnAggregates(queryMessage QueryMessage) []byte{
    return compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08,   "000000020000000100000008000d73797374656d5f736368656d61000a61676772656761746573000d6b657973706163655f6e616d65000d000e6167677265676174655f6e616d65000d000e617267756d656e745f74797065730020000d000a66696e616c5f66756e63000d0008696e6974636f6e64000d000b72657475726e5f74797065000d000a73746174655f66756e63000d000a73746174655f74797065000d00000000")
}

// 11
func returnTriggers(queryMessage QueryMessage) []byte{
    return compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08, "000000020000000100000004000d73797374656d5f736368656d6100087472696767657273000d6b657973706163655f6e616d65000d000a7461626c655f6e616d65000d000c747269676765725f6e616d65000d00076f7074696f6e730021000d000d00000000")
}

// 12
func returnIndexes(queryMessage QueryMessage) []byte{
    return compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08,    "000000020000000100000005000d73797374656d5f736368656d610007696e6465786573000d6b657973706163655f6e616d65000d000a7461626c655f6e616d65000d000a696e6465785f6e616d65000d00046b696e64000d00076f7074696f6e730021000d000d00000000")
}

// 13
func returnViews(queryMessage QueryMessage) []byte{
    return compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08,  "000000020000000100000019000d73797374656d5f736368656d6100057669657773000d6b657973706163655f6e616d65000d0009766965775f6e616d65000d00176164646974696f6e616c5f77726974655f706f6c696379000d000d626173655f7461626c655f6964000c000f626173655f7461626c655f6e616d65000d0016626c6f6f6d5f66696c7465725f66705f6368616e63650007000763616368696e670021000d000d000363646300040007636f6d6d656e74000d000a636f6d70616374696f6e0021000d000d000b636f6d7072657373696f6e0021000d000d00106372635f636865636b5f6368616e63650007001a64636c6f63616c5f726561645f7265706169725f6368616e63650007001464656661756c745f74696d655f746f5f6c6976650009000a657874656e73696f6e730021000d0003001067635f67726163655f7365636f6e6473000900026964000c0013696e636c7564655f616c6c5f636f6c756d6e73000400126d61785f696e6465785f696e74657276616c0009001b6d656d7461626c655f666c7573685f706572696f645f696e5f6d73000900126d696e5f696e6465785f696e74657276616c0009000b726561645f726570616972000d0012726561645f7265706169725f6368616e63650007001173706563756c61746976655f7265747279000d000c77686572655f636c61757365000d00000000")
}
// 14
func returnVirtualKeySpaces(queryMessage QueryMessage) []byte{
    return compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08, "000000020000000100000001001573797374656d5f7669727475616c5f736368656d6100096b6579737061636573000d6b657973706163655f6e616d65000d000000020000000c73797374656d5f76696577730000001573797374656d5f7669727475616c5f736368656d61")
}
// 15
func returnVirtualTables(queryMessage QueryMessage) []byte{
    return compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08, "000000020000000100000003001573797374656d5f7669727475616c5f736368656d6100067461626c6573000d6b657973706163655f6e616d65000d000a7461626c655f6e616d65000d0007636f6d6d656e74000d000000150000000c73797374656d5f7669657773000000066361636865730000000d73797374656d206361636865730000000c73797374656d5f766965777300000007636c69656e74730000001b63757272656e746c7920636f6e6e656374656420636c69656e74730000000c73797374656d5f766965777300000018636f6f7264696e61746f725f726561645f6c6174656e6379000000000000000c73797374656d5f766965777300000018636f6f7264696e61746f725f7363616e5f6c6174656e6379000000000000000c73797374656d5f766965777300000019636f6f7264696e61746f725f77726974655f6c6174656e6379000000000000000c73797374656d5f76696577730000000a6469736b5f7573616765000000000000000c73797374656d5f766965777300000011696e7465726e6f64655f696e626f756e64000000000000000c73797374656d5f766965777300000012696e7465726e6f64655f6f7574626f756e64000000000000000c73797374656d5f7669657773000000126c6f63616c5f726561645f6c6174656e6379000000000000000c73797374656d5f7669657773000000126c6f63616c5f7363616e5f6c6174656e6379000000000000000c73797374656d5f7669657773000000136c6f63616c5f77726974655f6c6174656e6379000000000000000c73797374656d5f7669657773000000126d61785f706172746974696f6e5f73697a65000000000000000c73797374656d5f76696577730000000d726f77735f7065725f72656164000000000000000c73797374656d5f76696577730000000873657474696e67730000001063757272656e742073657474696e67730000000c73797374656d5f76696577730000000d73737461626c655f7461736b730000001563757272656e742073737461626c65207461736b730000000c73797374656d5f76696577730000001173797374656d5f70726f706572746965730000002443617373616e6472612072656c6576616e742073797374656d2070726f706572746965730000000c73797374656d5f76696577730000000c7468726561645f706f6f6c73000000000000000c73797374656d5f766965777300000013746f6d6273746f6e65735f7065725f72656164000000000000001573797374656d5f7669727475616c5f736368656d6100000007636f6c756d6e730000001a7669727475616c20636f6c756d6e20646566696e6974696f6e730000001573797374656d5f7669727475616c5f736368656d61000000096b65797370616365730000001c7669727475616c206b6579737061636520646566696e6974696f6e730000001573797374656d5f7669727475616c5f736368656d61000000067461626c6573000000197669727475616c207461626c6520646566696e6974696f6e73")
}
// 16
func returnVirtualColumns() []byte{
    decodedByteArray, _ :=  hex.DecodeString("")
    return decodedByteArray
}

func returnDefault(db *sql.DB, queryMessage QueryMessage) []byte{
    //output := tidb.QueryAnything(db, "SELECT col01, col02 FROM test01" )
    //output := tidb.QueryAnything(db, "select TABLE_SCHEMA, TABLE_NAME, VERSION, TABLE_ROWS, AVG_ROW_LENGTH, CREATE_TIME from information_schema.tables limit 1 " )
    //output := tidb.QueryAnything(db, "select * from information_schema.tables limit 1 " )

    //fmt.Printf("The data here is <%s>", queryMessage.PayLoad)
    //return nil

    fmt.Printf("The pay load is <%s> and <%x>", queryMessage.PayLoad.Query, queryMessage.PayLoad.Query)
    output := tidb.QueryAnything(db, queryMessage.PayLoad.Query )
    return compute_crc32(0x85, 0x00, queryMessage.StreamID, 0x08, output)
}

func compute_crc32(version int, flag int, streamId int16, operation int, payLoad string) []byte {
    // Calculate the crc24 for header
    // crc := compute_crc24([]byte{0x02, 0x00, 0x3a})
    // crc := compute_crc24(0x3a0002, 3) //   -> 736183
    // crc24 := compute_crc24(0x690402 , 3) // -> 30dc91

    // Format the message for crc32 calculation
    message := fmt.Sprintf("%02x%02x%04x%02x%08x%s", version, flag, streamId, operation, len(payLoad)/2, payLoad)
    //fmt.Printf("The raw data is <%s> \n", message)
    message4crc32, _ :=  hex.DecodeString(CRC32_INITIAL_VALUE + message)
    crc32Code := crc32.ChecksumIEEE(message4crc32)
    crc32CodeLittle  := make([]byte, 4)
    binary.LittleEndian.PutUint32(crc32CodeLittle, crc32Code)
    fmt.Printf("The calculated crc32 is <%x>", crc32Code)

    // Calculate the payload length and convert to little endian
    payloadLittle := make([]byte, 4)
    binary.LittleEndian.PutUint32(payloadLittle, uint32(len(message)/2) )
    payloadCode := binary.BigEndian.Uint32(payloadLittle) >> 8
    payloadCode ^= 0x02

    fmt.Printf("                   The message length is <%x> \n", payloadCode)
    crc24 := compute_crc24(payloadCode, 3) // -> 8ed4bb
    msg2Ret, _ := hex.DecodeString( fmt.Sprintf("%s%s%x", crc24, message, crc32CodeLittle) )
    fmt.Printf("The crc is <%s>\n", crc24)
    return msg2Ret
}

func compute_crc24(data uint32, length int) string {
    crc := uint32(CRC24_INIT)
    fmt.Printf("The data: <%x> and length: <%d>\n", data, length)
    crc32CodeBig  := make([]byte, 4)
    binary.BigEndian.PutUint32(crc32CodeBig, data)
    fmt.Printf("The bytes data is <%v> \n", crc32CodeBig )
    for _idx, _char := range crc32CodeBig {
         if _idx < 4-length {
             continue
         }
         fmt.Printf("ix: <%x>, The looped data is <%x>, length is <%x>\n", _idx, _char, length)
         crc ^= uint32(_char) << 16
         fmt.Printf("compute_crc24:  data: <%x>,    crc: <%x> \n", (uint32(_char) << 16), crc)
         for i := 0; i < 8; i++ {
             crc <<= 1
             if crc&0x1000000 != 0 {
                 crc ^= CRC24_POLY
             }
         }
    }
    crc <<= 8
    binary.LittleEndian.PutUint32(crc32CodeBig, crc)
    fmt.Printf("The crc is <%x>", binary.BigEndian.Uint32(crc32CodeBig))
    // return crc
    return fmt.Sprintf("%06x%06x", data, binary.BigEndian.Uint32(crc32CodeBig))
}

func compressLz4(){
    // Compress and uncompress an input string.
    s := "hello world"
    r := strings.NewReader(s)

    // The pipe will uncompress the data from the writer.
    pr, pw := io.Pipe()
    zw := lz4.NewWriter(pw)
    zr := lz4.NewReader(pr)

    go func() {
        // Compress the input string.
        _, _ = io.Copy(zw, r)
        _ = zw.Close() // Make sure the writer is closed
        _ = pw.Close() // Terminate the pipe
    }()

    _, _ = io.Copy(os.Stdout, zr)
}


    //var supportedVersion SupportedVersion 
//    supportedVerion.ProtocolVersion = []string{"3/v3", '4/v4', '5/v5', '6/v6-beta'}
//    supportedVerion.Compression = []string{"snappy", "lz4"}
//    supportedVerion.CQLVersion = []string{"3.4.7"}

func DumpSupportedVersion(values map[string]interface{}) []byte {
    data := make([]byte, 0, 128)

    fmt.Printf("Number of keys: %d \n", len(values))

    // Append 3 as the number of key/values
    data = Uint16(data, uint16(len(values)) )

    for key, value := range values {
        fmt.Printf("key: %#v  value: %#v \n", key, value)
        bytesValue := dumpString(key)
        data = append(data, bytesValue...)

        listValue := value.([]string)
        data = Uint16(data, uint16(len(listValue)) )

        for _, listEntry := range listValue {
            bytesValue := dumpString(listEntry)
            data = append(data, bytesValue...)
        }
    }
    // ----- Append protocol version
    // Append string key(len + value)
//    // Append number of values of the protocol version
//    // Loop: protocol version
//    for _, value := range pSupportedVersion.ProtocolVersion {
//        // Append string value(len + value)
//    }
//
//    // ----- Append compression
//    // Append string key(len + value)
//    // Append number of values of the protocol version
//    // Loop: protocol version
//    for _, value := range pSupportedVersion.ProtocolVersion {
//        // Append string value(len + value)
//    }

    
    return data
}

func dumpString(value string) []byte {
    data := make([]byte, 0, 128)

    data = Uint16(data, uint16(len(value)) )

    data = append(data, []byte(value)...)

    return data
}

func Uint8(buffer []byte, n uint8) []byte {
        buffer = append(buffer, byte(n))
        return buffer
}

// Uint16 dumps an uint16 as byte slice.
func Uint16(buffer []byte, n uint16) []byte {
        buffer = append(buffer, byte(n>>8))
        buffer = append(buffer, byte(n))
        return buffer
}

func Uint32(buffer []byte, n uint32) []byte {
        buffer = append(buffer, byte(n>>24))
        buffer = append(buffer, byte(n>>16))
        buffer = append(buffer, byte(n>>8))
        buffer = append(buffer, byte(n))
        return buffer
}

func ToUint32(n uint32) []byte {
    buffer := make([]byte, 0, 4)
    buffer = append(buffer, byte(n>>24))
    buffer = append(buffer, byte(n>>16))
    buffer = append(buffer, byte(n>>8))
    buffer = append(buffer, byte(n))
    return buffer
}

type ResponseHeader struct {
    version  byte    // One byte: 0x03 / 0x83
    flag     uint16  // Two bytes: flag
    streamId uint8   // One byte: 
    opCode  string // It's only for request from client
    length   uint32  // Four bytes: 
}

func (h *ResponseHeader)Init(version byte, flag uint16, streamId uint8){
    h.version = version
    h.flag = flag
    h.streamId = streamId
}

func NewResponseHeader(version byte, flag uint16, streamId uint8) *ResponseHeader {
    var responseHeader ResponseHeader
    responseHeader.Init(version, flag, streamId)
    return &responseHeader
}

func (h *ResponseHeader) ToString() string {
    return fmt.Sprintf("version: %b, flag: %d, stream id: %d", h.version, h.flag, h.streamId)
}

func (h *ResponseHeader) ToBytes() []byte {
    data := make([]byte, 0, 9)

    data = append(data, h.version)
    data = Uint16(data, h.flag)
    data = Uint8(data, h.streamId)
    data = Uint8(data, 6)               // opcode
    data = Uint32(data, 0)              // length

    return data
}


type StringMultiMap struct {
    header ResponseHeader
    values map[string][]string
    keys   []string
}

func NewStringMultiMap(responseHeader *ResponseHeader) *StringMultiMap {
    var instance StringMultiMap
    instance.Init(*responseHeader)

    return &instance
}

func (s *StringMultiMap)Init(responseHeader ResponseHeader){
    s.values = make(map[string][]string)
    s.header = responseHeader
}

func (s *StringMultiMap)Append(key string, value []string){
    s.keys = append(s.keys, key)
    s.values[key] = value
}

func (s *StringMultiMap)ToBytes() []byte {
    data := make([]byte, 0, 128)

    data = append(data, s.header.ToBytes()... )

    fmt.Printf("Number of keys: %d \n", len(s.keys))

    // Append 3 as the number of key/values
    data = Uint16(data, uint16(len(s.keys)) )

    for _, key := range s.keys {
        // Append key
        bytesKey := dumpString(key)
        data = append(data, bytesKey...)

        listValue := s.values[key]

        // Append number of values
        data = Uint16(data, uint16(len(listValue)) )

        for _, listEntry := range listValue {
            bytesValue := dumpString(listEntry)
            data = append(data, bytesValue...)
        }
    }

    for idx:=0; idx<4; idx++ {
        byteFrameLen := ToUint32(uint32(len(data)-9))      // len(body message) = len(data) - len(header)
        data[idx+5] = byteFrameLen[idx]
    }

    return data
}

func (s *StringMultiMap)ToString() (ret string) {

    for _, key := range s.keys {
        if ret == "" {
            ret = fmt.Sprintf("%s -> %s", key, strings.Join(s.values[key], ","))
        } else {
            ret = fmt.Sprintf("%s  %s -> %s", ret, key, strings.Join(s.values[key], ","))
        }
    }
    return
}
